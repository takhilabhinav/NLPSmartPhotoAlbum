AWSTemplateFormatVersion: 2010-09-09
Transform: "AWS::Serverless-2016-10-31"
Description: P1

Resources:
  photosalbumb2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: photosalbumb2

  photosalbumb1:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: photosalbumb1

  LambdaExecutionRoleLF1:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Description: "The execution role for the lambda LF1."
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "LambdaLF1Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: "arn:aws:s3:::photosalbumb2"
              - Effect: Allow
                Action:
                  - rekognition:DetectLabels
                Resource: "*"
              - Effect: Allow
                Action:
                  - es:ESHttpPut
                  - es:ESHttpPost
                Resource: "*"
      RoleName: "LambdaExecutionRoleLF1"

  IndexPhotosLF1:
    Type: "AWS::Serverless::Function"
    Properties:
      # DependsOn: LambdaExecutionRoleLF1
      FunctionName: IndexPhotosLF1
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: s3://index-lf1/LF1.zip
      Description: LF1
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt LambdaExecutionRoleLF1.Arn
      Environment:
        Variables:
          Region: us-east-1
      Layers: [arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p38-requests:7]
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref photosalbumb2
            Events: s3:ObjectCreated:Put

  SearchPhotosLF2:
    Type: "AWS::Serverless::Function"
    Properties:
      # DependsOn: LambdaExecutionRoleLF1
      FunctionName: SearchPhotosLF2
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      CodeUri: s3://search-lf2/LF2.zip
      Description: LF2
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt LambdaExecutionRoleLF1.Arn
      Layers: [arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p38-requests:7]
      Environment:
        Variables:
          Region: us-east-1
  RestApiPhotoAlbum:
    Type: AWS::ApiGateway::RestApi
    Properties:
      BodyS3Location:
        Bucket: b3-photos-albums
        Key: "ApiPhotoAlbum-dev-swagger.yaml"
      Description: "Rest api having search photos and upload photos methods."
      Name: RestApiPhotoAlbum
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - "REGIONAL"
  PermissionForAPIToLF2:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SearchPhotosLF2.Arn
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Join
        - ""
        - - "arn:aws:apigateway:us-east-1::/restapis/"
          - !Ref RestApiPhotoAlbum
          - "/resources/*/methods/GET"

  PermissionForS3ToLF1:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref IndexPhotosLF1
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: "arn:aws:s3:::photosalbumb2"

 
  ES:
    Type: "AWS::Elasticsearch::Domain"
    Properties:
      DomainName: "photo"
      DomainEndpointOptions:
        EnforceHTTPS : true
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: "master_user"
          MasterUserPassword: "Suits1998*"
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: "arn:aws:es:us-east-1:824208337648:domain/photo/*"
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: "false"
        InstanceCount: "1"
        ZoneAwarenessEnabled: "false"
        InstanceType: "t3.small.elasticsearch"
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: "gp2"
      ElasticsearchVersion: "7.1"

  RestApiPhotoAlbumDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [RestApiPhotoAlbum]
    Properties:
      Description: The v1 deployment of photo album api
      RestApiId: !Ref RestApiPhotoAlbum
      StageName: v1